class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {

        int n1 = nums1.length;          // find the length of both arrays.
        int n2 = nums2.length;

        int n = n1+n2;                  // length of new array.

//      create a new array to store all the elements.
        int [] res = new int[n];    

        int i = 0;                      // i will point to num1.
        int j = 0;                      // j will point to num2.
        int k = 0;                      // k will point to res.

        while(i < n1 && j < n2)         // while num1 and num2 has elements.
        {
            if(nums1[i] <= nums2[j])    // if element is num1 is smaller than num2
            {
//              smaller element goes into new array and 
//              ONLY the index of that element is incremented.
                res[k] = nums1[i++];    
            }
            else
            {
                res[k] = nums2[j++];
            }
            // finally, k is incremented. It is outside of if-else because it will be 
            // incremented in both the cases.
            k++;
        }
        while(i < n1)                   // it means nums2 has ended. So, add all elements of 
        {                               // nums1 in res.
            res[k++] = nums1[i++];
        }
        while(j < n2)                   // it means nums1 has ended. So, add all elements of 
        {                               // num2 in res.
            res[k++] = nums2[j++];
        }
        


        double median;          // declaring median;
        n--;                    // n represents the last index.
        if(n % 2 != 0)          // if the total elements are odd.
        {
            median = (double) (res[n/2] + res[(n/2) + 1])/2;
        }
        else                    // if the total elements are even
        {
            median = res[n/2];
        }

//      finally, return the median.
        return median;

    } 
        
}